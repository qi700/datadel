数据中心虚拟化七大问题
如果你的服务器仍然没有进行虚拟化，甚至你根本就没想明白虚拟化的优势，那么你是不是有点落伍呢？数据中心虚拟化正在势不可挡地迅猛发展，据IDC预测，到2009年超过5  0％的新购x86服务器都将默认进行虚拟化。
如何选择合适的虚拟化产品来支撑下一代的数据中心？哪些虚拟化的特性是数据中心必需的？记者就此采访了VMware大中华区技术总监张振伦。他认为，在选择数据中心级的服务器虚拟化方案时应该考虑以下七个问题。
一、是否获得企业级用户的广泛验证
要将虚拟化技术引入到数据中心级的环境中，首先要考察该产品的用户情况。如果该产品的用户数量很少，没有在各种复杂的环境中获得实际验证，即使可以提供很漂亮的演示，仍然不能在数据中心这些关键的环境中获得大量使用。因为数据中心环境往往十分复杂，用户对应用的在线时间等都有严格要求，引入不成熟产品可能后患无穷。
二、是否形成完整的生态系统
要进入数据中心应用，虚拟化的产品必须能满足各种复杂环境的需求。数据中心设备种类繁多、型号复杂，对虚拟化产品提出了苛刻的要求。虚拟化产品不是能够安装在x86服务器上就万事大吉了，由于虚拟化往往涉及到IT的整个架构，所以虚拟化产品还要保证和存储设备、网络设备等无缝兼容，获得各个硬件厂家的支持和认可。另外，虚拟化还涉及相应的操作系统和应用层，也要和数据中心运行的各种x86平台的操作系统和应用兼容，确保互操作性。因此，选择虚拟化方案时，要通过IT架构的各个层面来考察它的兼容和互操作能力，而不能仅仅从服务器方面简单判定了事。
三、要具有强大的可靠性和扩展能力
服务器虚拟化正在迅速改变着IT的架构，所以一旦部署，虚拟化产品的可靠性和扩展性对数据中心来说就变得生死攸关。因此，要从可靠性和扩展性能力综合考察虚拟化产品。为了达到可靠性的要求，数据中心虚拟化只能选择裸金属架构的虚拟化架构。
对于这种架构，虚拟化层的稳定性相当关键。为了达到可靠性的要求，虚拟化层往往是专门设计的虚拟化内核而不是通用的操作系统，从而可以提高可靠性。当然，对于可靠性和扩展性的最好的验证不是理论，而是用户的实际应用。
四、性能能否满足要求
性能是数据中心追求的一个重要指标，因此虚拟化对性能的消耗也是考察的一个要素。一款优秀的虚拟化产品本身要能尽可能少占资源，可以让更多的资源来运行用户的应用。同时也要很好地调度不同虚拟机之间的资源，来确保运行在虚拟化平台上的所有应用都能高速可靠运行。为了达到这一要求，虚拟化产品要实现对CPU和内存等资源精密控制，比如CPU要控制到MHz、内存控制到MB，确保服务器里的资源最大限度利用，同时尽可能简化虚拟化层所带来的负载。当然，CPU的一些特性也要能很好地支持，如多线程、多核、虚拟化等。资源的有效调度也是性能的重要指标。
五、能否支持企业级应用负载
数据中心的应用千差万别，某些应用的负载可能会比较高，如何支持这些高负载的应用，对虚拟平台是一个挑战。在选择虚拟化方案时要看该产品对负载的支持能力，否则将会导致数据中心很多应用没法享受到虚拟化的好处，最后不得不实现分组管理，增加了数据中心的复杂性。 VMware ESX 3.x上的每个虚拟机都可支持到16GB的内存和4个虚拟CPU，可以轻松运行各种大负载的应用，满足数据中心对高负载应用的支持能力。
六、能否提供灵活的资源调度和动态负载调整能力
在构建基于虚拟化的数据中心，享受到服务器利用率提高的同时，也要考虑到维护的方便性。比如，当一个物理服务器上运行20～30个虚拟化应用后，如果不能进行有效架构设计和提供资源动态调度能力，就会使得这台物理服务器的维护变得举步维艰。因为，在传统模式下，每台服务器只承载一个应用，通常可以申请停机来维护该服务器，此时只会影响一个应用。部署了服务器虚拟化平台后，服务器硬件的停机就会影响数十个应用，使得物理服务器停机成为奢望。因此，虚拟化的平台必须提供虚拟机动态迁移能力，在需要进行服务器维护时，将该物理服务器上的虚拟机动态在线迁移到其他物理服务器，从而使得维护无后顾之忧。其实，VMware就在Virtual Infrastructure 3产品中提供了VMotion的功能来实现虚拟机的动态在线迁移。
当然，如果能根据虚拟机负载大小，进行虚拟机的动态分布，将会使得数据中心虚拟化获得更多回报，让用户能更灵活控制服务器资源和应用分布。这需要虚拟机在线迁移特性的支持，没有虚拟化的在线迁移功能，虚拟机的动态分布就成为空中楼阁了。VMware就提供DRS (Distributed Resource Scheduling)功能。
七、能否提供出色的管理能力
一旦部署了虚拟化，整个数据中心的管理就很大程度上依赖于虚拟化的管理。因此，虚拟化的管理一定要精细、准确、方便。当然，出于考虑虚拟化管理软件本身，还要注意虚拟化管理软件和第三方软件的集成能力，以及虚拟化产品本身是否提供简便易用的SDK和API，方便进行二次开发。